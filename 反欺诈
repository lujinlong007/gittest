
	
		
		
 	
	四川农信RTD实时反欺诈测试报告
	 	
			
	文档版本	01		
	发布日期	2021-04-15		
	报告人：王东东，白文武，王苏亮，邱耀 
	
	华为技术有限公司		
		
 

版权所有 © 华为技术有限公司 2015。 保留一切权利。

非经华为技术有限公司书面同意，任何单位和个人不得擅自摘抄、复制本手册内容的部分或全部，并不得以任何形式传播。

商标声明
  、HUAWEI、华为、 是华为技术有限公司的商标或者注册商标。
在本手册中以及本手册描述的产品中，出现的其他商标、产品名称、服务名称以及公司名称，由其各自的所有人拥有。

免责声明
本文档可能含有预测信息，包括但不限于有关未来的财务、运营、产品系列、新技术等信息。由于实践中存在很多不确定因素，可能导致实际结果与预测信息有很大的差别。因此，本文档信息仅供参考，不构成任何要约或承诺。华为可能不经通知修改上述信息，恕不另行通知。

	
	
	
	



华为技术有限公司
地址：	深圳市龙岗区坂田华为总部办公楼     邮编：518129
网址：	http://www.huawei.com





目 录
1	测试目的	1
2	测试计划	1
3	测试环境	1
3.1	测试环境拓扑结构图	1
3.2	环境配置及组件部署详细表	1
4	测试案例	1
4.1	业务规则描述	1
4.2	数据表准备	1
4.3	数据表结构	1
4.3.1	TB_TRANS_ACCOUNT 用户交易表	1
4.3.2	TB_TRANS_ACCOUNT 用户交批次变量表	1
4.4	数据库建模	1
4.5	报文设计	1
4.6	规则转化存储过程	1
4.6.1	规则2：1天内交易笔数大于50次，命中减10分；	1
4.6.2	规则3：账户开立后_1小时内连续发生10笔以上交易，命中减10分，直接拒绝；	1
4.6.3	规则6：客户过去182天内交易次数与近2天内交易次数相同，命中10分；	1
4.6.4	规则7：1天内账户在多个ip省份上进行转账，命中减15分，提示；	1
4.6.5	规则8：同一账号在2天内收到8个及以上账户转入，且12小时内向外转账达到余额的95%，且转出账户超过8个以上，命中减12分，提示；	1
4.6.6	规则9：5天内同一收款人之间累计交易12笔以上，且交易金额占付款人当天交易总金额的10%左右，命中减11分，提示；	1
4.6.7	规则10：一天内同一个账户想大于等于5个收款人进行转账，其中转账进入上下浮动10%，命中减11分，提示；	1
4.6.8	规则11：同一账户2小时内小额试刷(50元以内)次数大于X次后，大额转账金额大于等于Y，提示；	1
4.6.9	规则12：一天内账户转账次数大于等于X次，且金额逐渐试探性从小到大，提示；	1
4.6.10	规则13：蜀信e账户手机号码修改后短时间1小时内累计金额超X，提示；	1
4.6.11	规则14：90天无交易，突然进行大额转账，提示；	1
4.6.12	规则15：1天内账户登录多个设备进行转账，提示；	1
5	测试结果	1
5.1	维度查看	1
5.2	事件源查看	1
5.3	规则查看	1
5.4	单条报文HTTP请求，命中结果(几条重要的规则与登虎对齐查看了命中情况)	1
5.5	使用KAFKA进行性能压测	1
5.5.1	编写程序给kafka推送数据	1
5.5.2	复制多分程序来进行数据压测。	1
5.5.3	设置kafka分区数、以及事件源对应的消费实例。	1
5.5.4	观察BLU时延和TPS。	1
6	后期调优思路	1
6.1	增加BLU应用并发	1
6.2	增加RTDDB的分区数	1
6.3	增大RTDDB的JVM参数	1
6.4	规则的SQL调优	1
6.5	OS的参数排查及调优	1
6.6	实时入库表设计调优	1
6.7	预期TPS超过一万	1
7	可靠性方案	1
8	生产系统资源评估	1
9	测试过程遇到的问题	1
9.1	数据压测使用JMETER限制	1
10	附录	1
10.1	常见术语	1

 
1	测试目的
四川农信针对实时反欺诈业务场景，引入RTD实时决策平台，对银行交易、贷款等行为进行实时决策，识别诈骗、盗刷等异常数据，当前测试主要针对交易欺诈的场景。
2	测试计划
第一阶段（20210409-20210410）：环境部署。
第二阶段（20210411-20210412）：数据库建模、规则转换存储过程，事件源/ 维度等定义，功能测试。
第三阶段（20210413-20210415）：性能测试。
第四阶段（20210415-20210415）：编写测试报告，总结测试问题。
3	测试环境
3.1	测试环境拓扑结构图
 
图2- 1 测试环境拓扑结构图

 
图2- 2 RTD架构图

3.2	环境配置及组件部署详细表	
具体的环境(FusionInsight RTD 6.5.1)信息如下表所示：
节点	配置	节点安装角色
10.16.9.59	8C64G虚拟机	OMS、RTD Service、ZK、Containers、Kafka、DBService、LdapServer、KrbServer
10.16.9.60	8C64G虚拟机	OMS、RTD Service、ZK、Containers、Kafka、DBService、LdapServer、KrbServer
10.16.9.62	4C32G虚拟机	ZK、Containers、Kafka
10.16.9.63	4C33G虚拟机	Containers、Kafka
10.16.11.13	40C378G虚拟机	Containers、Kafka、RTDDB
10.16.11.190	40C378G虚拟机	Containers、Kafka、RTDDB
10.16.11.191	40C188G虚拟机	Containers、Kafka、RTDDB
10.16.9.59	8C64G虚拟机	OMS、RTD Service、ZK、Containers、Kafka、DBService、LdapServer、KrbServer
4	测试案例
4.1	业务规则描述
规则序号	规则逻辑	规则数量
1	10日内同一IP累计交易金额大于等于3倍最高日交易额，且10内交易笔数超过20笔	　
2	1天内交易笔数对于50次	  
3	账户开立后_1小时内连续发生10笔以上交易	　
4	绑定手机号X天内关联多个账户	X2
5	NA	
6	客户过去182天内交易次数与近2天内交易次数相同	　
7	1天内账户在多个ip省份上进行转账	　
8	同一账号在2天内收到8个及以上账户转入，且12小时内向外转账达到余额的95%，且转出账户超过8个以上	X2
9	5天内同一收款人之间累计交易12笔以上，且交易金额占付款人当天交易总金额的10%左右	　
10	一天内同一个账户想大于等于5个收款人进行转账，其中转账进入上下浮动10%	　
11	同一账户2小时内小额试刷(50元以内)次数大于X次后，大额转账金额大于等于Y	　
12	一天内账户转账次数大于等于X次，且金额逐渐试探性从小到大	X6
13	蜀信e账户手机号码修改后短时间1小时内累计金额超X	X13
14	90天无交易，突然进行大额转账	X3
15	1天内账户登录多个设备进行转账	X3
  现场截图显示
 
4.2	数据表准备
	表名	含义	数据量（行）
TB_TRANS_ACCOUNT	客户交易表	20000000
T_TRANS_ACCOUNT_BATCH	用户批次变量表	0
4.3	数据表结构
4.3.1	TB_TRANS_ACCOUNT 用户交易表
ACCOUNTLOGIN 	varchar(20 BYTES)	客户号
TRANSID      	varchar(20 BYTES)	交易流水号
EVENTOCCURTIME 	timestamp	事件时间
IPADDRESSPROVINCE 	varchar(20 BYTES)	IP地址归属省
IPADDRESS   	varchar(20 BYTES)	IP地址
RECACCOUNT  	varchar(20 BYTES)	收款方账号
DEVICEID    	varchar(20 BYTES)	设备ID
PAYACCOUNT  	varchar(20 BYTES)	付款方账号
TRADEAMOUNT 	decimal	交易金额
BALANCE     	decimal	交易余额
BINDMOBILE  	varchar(20 BYTES)	绑定手机号
4.3.2	T_TRANS_ACCOUNT_BATCH 用户交批次变量表
CUR_VER_FLAG	tinyint	标记
KEY	varchar(20 BYTES) 	客户号
VALUE	varchar(1048576 BYTES)	跑批结果
4.4	数据库建模

针对上图关联关系，需要引入一张事件源表和一张批次变量表。表结构见sql文件。
 
4.5	报文设计
 
4.6	规则转化存储过程
4.6.1	规则2：1天内交易笔数大于50次，命中减10分；
declare 
    v_tradeNum int;
begin 
    select count(1) into v_ tradeNum from TRANS_ACCOUNT where accountLogin=ev_accountLogin and SINCE_EPOCH(SECOND,cast(eventOccurTime as timestamp)) > SINCE_EPOCH(SECOND,cast(ev_eventOccurTime as timestamp)) - 86400 ;
	if v_tradeNum > 50 then
	   pr_trade_rule2:=10;
	end if 
end;
4.6.2	规则3：账户开立后_1小时内连续发生10笔以上交易，命中减10分，直接拒绝；
declare 
    v_tradeNum int;
begin 
    select count(1) into v_ tradeNum from TRANS_ACCOUNT where accountLogin=ev_accountLogin and SINCE_EPOCH(SECOND,cast(eventOccurTime as timestamp)) > SINCE_EPOCH(SECOND,cast(ev_eventOccurTime as timestamp)) - 3600 ;
	if v_tradeNum > 10 then
	   pr_trade_rule3:=10;
	end if 
end;
4.6.3	规则6：客户过去182天内交易次数与近2天内交易次数相同，命中10分；
declare 
    v_tradeNum int;
    v_tradeNum182 int;
begin 
    select count(1) into v_tradeNum from TRANS_ACCOUNT where accountLogin=ev_accountLogin and SINCE_EPOCH(SECOND,cast(eventOccurTime as timestamp)) > SINCE_EPOCH(SECOND,cast(ev_eventOccurTime as timestamp)) - 172800 ;
	select count(1) into v_tradeNum182 from TRANS_ACCOUNT where accountLogin=ev_accountLogin and SINCE_EPOCH(SECOND,cast(eventOccurTime as timestamp)) <= SINCE_EPOCH(SECOND,cast(ev_eventOccurTime as timestamp)) - 172800 ;
	if v_tradeNum = v_tradeNum182 then
	   pr_trade_rule5:=10;
	end if 
end;
4.6.4	规则7：1天内账户在多个ip省份上进行转账，命中减15分，提示；
declare 
    v_provinceNum int;
begin 
    select count(distinct ipAddressProvince) into v_provinceNum from TRANS_ACCOUNT where accountLogin=ev_accountLogin and SINCE_EPOCH(SECOND,cast(eventOccurTime as timestamp)) > SINCE_EPOCH(SECOND,cast(ev_eventOccurTime as timestamp)) - 86400 ;
	if v_provinceNum > 10 then
	   pr_trade_rule7:=15;
	end if 
end;
4.6.5	规则8：同一账号在2天内收到8个及以上账户转入，且12小时内向外转账达到余额的95%，且转出账户超过8个以上，命中减12分，提示；
declare 
    v_recAccountNum int;
    v_payAccountNum int;
    v_trdeAmount int;
begin 
    select count(distinct RECACCOUNT) into v_recAccountNum from TRANS_ACCOUNT where accountLogin=ev_accountLogin and SINCE_EPOCH(SECOND,cast(eventOccurTime as timestamp)) > SINCE_EPOCH(SECOND,cast(ev_eventOccurTime as timestamp)) - 172800 ;
	if v_recAccountNum > 8 then
	   select sum(tradeAmount) into v_trdeAmount from TRANS_ACCOUNT where accountLogin=ev_accountLogin and SINCE_EPOCH(SECOND,cast(eventOccurTime as timestamp)) > SINCE_EPOCH(SECOND,cast(ev_eventOccurTime as timestamp)) - 43200 ;
	   if ev_balance/(ev_balance+v_trdeAmount) then 
	      select count(distinct payAccount) into v_payAccountNum from TRANS_ACCOUNT where accountLogin=ev_accountLogin and SINCE_EPOCH(SECOND,cast(eventOccurTime as timestamp)) > SINCE_EPOCH(SECOND,cast(ev_eventOccurTime as timestamp)) - 43200 ;
		  if v_payAccountNum > 8 then 
		     pr_trade_rule8:=12;
		  end if;
	   end if;
	end if;
end;
4.6.6	规则9：5天内同一收款人之间累计交易12笔以上，且交易金额占付款人当天交易总金额的10%左右，命中减11分，提示；
Notice：该问题描述有问题，是否应该占总金额的10%
declare 
    v_tradeNum int;
    v_trdeAmount int;
begin 
    select count(1) into v_tradeNum from TRANS_ACCOUNT where accountLogin=ev_accountLogin and SINCE_EPOCH(SECOND,cast(eventOccurTime as timestamp)) > SINCE_EPOCH(SECOND,cast(ev_eventOccurTime as timestamp)) - 432000;
	if v_tradeNum > 12 then
	   select sum(tradeAmount) into v_trdeAmount from TRANS_ACCOUNT where accountLogin=ev_accountLogin and SINCE_EPOCH(SECOND,cast(eventOccurTime as timestamp)) > SINCE_EPOCH(SECOND,cast(ev_eventOccurTime as timestamp)) - 432000;
	   if v_trdeAmount/(ev_balance+v_trdeAmount)>0.1 then 
		  pr_trade_rule8:=9;
	   end if;
	end if;
end;
4.6.7	规则10：一天内同一个账户想大于等于5个收款人进行转账，其中转账进入上下浮动10%，命中减11分，提示；
declare 
    v_payAccountNum int;
begin 
    select count(distinct payAccount) into v_payAccountNum from TRANS_ACCOUNT where accountLogin=ev_accountLogin and SINCE_EPOCH(SECOND,cast(eventOccurTime as timestamp)) > SINCE_EPOCH(SECOND,cast(ev_eventOccurTime as timestamp)) - 86400 and tradeAmount > ev_eventOccurTime - ev_eventOccurTime*0.1 and tradeAmount<ev_eventOccurTime+ev_eventOccurTime*0.1;
	if v_payAccountNum > 2 then
	   pr_trade_rule10:=11;
	end if 
end;
4.6.8	规则11：同一账户2小时内小额试刷(50元以内)次数大于X次后，大额转账金额大于等于Y，提示；
declare 
    v_tradeNum int;
    v_trdeAmount int;
begin 
    select count(1) into v_tradeNum from TRANS_ACCOUNT where accountLogin=ev_accountLogin and SINCE_EPOCH(SECOND,cast(eventOccurTime as timestamp)) > SINCE_EPOCH(SECOND,cast(ev_eventOccurTime as timestamp)) - 7200 and tradeAmount<50;
	if v_tradeNum > 10 then
	   if ev_tradeAmount >50000 then
	      pr_trade_rule11:=11;
	   end if;
	end if;
end;
4.6.9	规则12：一天内账户转账次数大于等于X次，且金额逐渐试探性从小到大，提示；
declare 
    v_payAccountNum int;
    v_tmp_amount double :=0;
	v_cnt int:=0;
	v_last_tmp_amount double:=1000000000;
begin 
    select count(1) into v_payAccountNum from TRANS_ACCOUNT where accountLogin=ev_accountLogin and SINCE_EPOCH(SECOND,cast(eventOccurTime as timestamp)) > SINCE_EPOCH(SECOND,cast(ev_eventOccurTime as timestamp)) - 86400;
	if v_payAccountNum > 10 then
	   while v_cnt < 3 loop
	        select tradeAmount into v_tmp_amount from TRANS_ACCOUNT where accountLogin=ev_accountLogin and SINCE_EPOCH(SECOND,cast(eventOccurTime as timestamp)) > SINCE_EPOCH(SECOND,cast(ev_eventOccurTime as timestamp)) - 86400 order by eventOccurTime desc limit offset v_cnt;
			if v_last_tmp_amount > v_tmp_amount then
			    v_last_tmp_amount := v_tmp_amount;
			else
			    exit;
			end if;
		    v_cnt:=v_cnt+1;
		end loop;
		if v_last_tmp_amount = v_tmp_amount then
		   pr_trade_rule12:=12;
		end if;
	end if;
end;
4.6.10	规则13：蜀信e账户手机号码修改后短时间1小时内累计金额超X，提示；
declare 
    v_notSamePhoneNum int:=0;
    v_sumAmount double:=0;
begin 
    select count(1) into v_notSamePhoneNum from TRANS_ACCOUNT where accountLogin=ev_accountLogin and SINCE_EPOCH(SECOND,cast(eventOccurTime as timestamp)) > SINCE_EPOCH(SECOND,cast(ev_eventOccurTime as timestamp)) - 7200 and bindMobile != ev_bindMobile;
	if v_notSamePhoneNum > 0 then
	   select sum(tradeAmount) into v_sumAmount from TRANS_ACCOUNT where accountLogin=ev_accountLogin and SINCE_EPOCH(SECOND,cast(eventOccurTime as timestamp)) > SINCE_EPOCH(SECOND,cast(ev_eventOccurTime as timestamp)) - 3600 and bindMobile = ev_bindMobile;
	   if v_sumAmount > 50000 then 
	      pr_trade_rule13:=13;
	   end if
	end if;
end;
4.6.11	规则14：90天无交易，突然进行大额转账，提示；
declare 
    v_tradeNum int:=0;
begin 
    if ev_tradeAmount > 100000 then
	   select count(1) into v_tradeNum from TRANS_ACCOUNT where accountLogin=ev_accountLogin and SINCE_EPOCH(SECOND,cast(eventOccurTime as timestamp)) > SINCE_EPOCH(SECOND,cast(ev_eventOccurTime as timestamp)) - 90*172800 and eventOccurTime != ev_eventOccurTime;
	   if v_notSamePhoneNum > 0 then
	      pr_trade_rule13:=14;
	   end if
	end if;
end;
4.6.12	规则15：1天内账户登录多个设备进行转账，提示；
declare 
    v_deviceNum int:=0;
begin 
    select count(distinct deviceID) into v_deviceNum from TRANS_ACCOUNT where accountLogin=ev_accountLogin and SINCE_EPOCH(SECOND,cast(eventOccurTime as timestamp)) > SINCE_EPOCH(SECOND,cast(ev_eventOccurTime as timestamp)) - 172800;
	if deviceID > 6 then
	   pr_trade_rule15:=15;
	end if;
end;
5	测试结果
	本次测试结果如下表所示，具体测试过程截图见4.1-4.3章节。
	TPS	端到端时延	DB节点资源利用率
事件源*1、规则*75
数据量20000000万条	7000	15ms	CPU 5%
内存6%
5.1	维度查看
 

5.2	事件源查看
 

5.3	规则查看
 
5.4	单条报文HTTP请求，命中结果(几条重要的规则与登虎对齐查看了命中情况)
 
 
5.5	使用kafka进行性能压测
5.5.1	编写程序给kafka推送数据

 
代码不能以附件形式出现在文档中，但是整个代码逻辑比较简单，编写过程就是创建producer对象，然后生成随机的message写入producer中，然后发送到kafka。可以通过RTD的集群安装和下载kafka组件以及其客户端，然后导入自己的java开发工程即可。

5.5.2	复制多分程序来进行数据压测。

 
观察可以发现，其写入速率到3000tps/s。
5.5.3	设置kafka分区数、以及事件源对应的消费实例。
	Kafka的分区数是28。

 
	TRANS_ACCOUNT_KAFKA事件源的实例32。
5.5.4	观察BLU时延和TPS。
 
 
改图时实例数为20个，kafka分区数为20个，时延大约是11ms
	将实例和分区改成32进行压测。
测试结果：TPS稳定在8200TPS/S,时延大概在13ms，峰值9800TPS接近1万，稳定20多分钟，此测试未能留存图片，由于环境安装问题，kafka导致磁盘写满，集群不可用
	将实例和分区改成3228进行压测。
测试结果：TPS稳定在7000TPS/S,时延大概在11ms 
 
 
测试结果：TPS平均7000是之前最好时TPS的2/3，时延也是原来时延相比原来增加了30%。
      分析原因可能有一下几点，一则是contianer节点存在四个节点CPU 100%负荷
                                  二则是kafka中积压的数据量不足导致
                                  三则是kafka的broker实例安装到了RTDDB对应的节点，对其处理数据的性能产生了影响


6	后期调优思路
6.1	增加BLU应用并发
6.2	增加RTDDB的分区数
6.3	增大RTDDB的JVM参数
6.4	规则的SQL调优
6.5	OS的参数排查及调优
6.6	实时入库表设计调优
6.7	预期TPS超过一万
7	可靠性方案
 
8	生产系统资源评估
评估依据：
1.	每天一千万的业务量，期望TPS的峰值3000.
2.	考虑可靠性方案
 
9	测试过程遇到的问题
9.1	数据压测使用jmeter限制
使用jmeter压测，随着压测线程增多，会出现文件句柄不够用，导致大量请求无法拿到文件句柄去处理而出现失败，修改windows的注册表参数后有好转，但是仍然存在该问题。
解决办法：采用kafka压测
10	附录
10.1	常见术语
ALB
	即接入负载均衡器，它对外提供http和socket接入能力，接受请求后转发给集群内的服务BLU（按照服务消费者规范开发，对外提供restful接口），完成不同协议接口之间的转换工作。
BLU
	Business Logic Unit，业务逻辑单元，是指在Farmer平台中完成某个业务逻辑的单元。BLU是业务处理的实体对象类，所有业务的逻辑都在该实体内，可以多实例部署。
Containers
	提供业务处理容器，是RTD BLU的承担体，负责运行RTD的事件处理业务逻辑，从MQ接收事件消息，处理业务链辑，访问RTDDB数据库。Container为RTD BLU提供了水平扩展、自动部署、资源隔离的能力。
RTD Service
	提供RTD平台的业务安装、布署、运行及业务逻辑的编排能力，是整个RTD平台的核心组件，采用主备模式布署，保证可用性。

